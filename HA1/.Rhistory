?read.table
read.csv(C:\Users\isoch\Google 云端硬盘\Study\1. Semester an Uni-Tuebingen\Microarray Bioinformatik\HA1\material\OligoHitsums1.csv)
read.csv(C:\Users\isoch\Desktop\OligoHitsums1.csv)
read.csv("C:\Users\isoch\Desktop\OligoHitsums1.csv")
read.csv("C:\Users\isoch\Desktop\OligoHitsums1.csv")
read.table("OligoHitsums1.csv",header=FALSE,sep="'",row.names=1)
read.table("C:\Users\isoch\Desktop\OligoHitsums1.csv",header=FALSE,sep="'",row.names=1)
read.table("Users\isoch\Desktop\OligoHitsums1.csv",header=FALSE,sep="'",row.names=1)
getwd()
read.table("C:/Users/isoch/Desktop/OligoHitsums1.csv",header=FALSE,sep=",",row.names=1)
oligo1 = read.table("C:/Users/isoch/Desktop/OligoHitsums1.csv",header=FALSE,sep=",",row.names=1)
View(oligo1)
oligo1[1,]
oligo1[c(1,2,3),]
c(1,2,3)
1;3
1:3
dim(oligo1)
oligo1[1,]
oligo1[,1] #取第一列
sum(oligo1[1,])
sum(oligo1[2,])
boxplot(oligo1,)
boxplot(oligo1,
col='green',
pars=list(outcol='red'),
main='All probes, 60 to 100 mismatches',
xlab='number of mismatches',
ylab='number of oligos with x mismatches')
boxplot(oligo1,
col='green',
pars=list(outcol='red'),
main='All probes, 60 to 100 mismatches',
xlab='number of mismatches',
ylab='number of oligos with x mismatches')
source('C:/Users/isoch/Google 云端硬盘/Study/1. Semester an Uni-Tuebingen/Microarray Bioinformatik/Tutorium 2.R')
oligo1 = read.table("C:/Users/isoch/Desktop/OligoHitsums1.csv",header=FALSE,sep=",",row.names=1)
boxplot(oligo1,
col='green',
pars=list(outcol='red'),
main='All probes'
xlab='number of mismatches',
ylab='number of oligos with x mismatches')
boxplot(oligo1,
col='green',
pars=list(outcol='red'),
main='All probes',
xlab='number of mismatches',
ylab='number of oligos with x mismatches')
boxplot(oligo1[,60:100],
col='green',
pars=list(outcol='red'),
main='All Probes, 60 to 100 mismatches',
xlab='number of mismatches',
ylab='number of oligos with x mismatches')
boxplot(oligo1[,61:101],
col='green',
pars=list(outcol='red'),
main='All Probes, 60 to 100 mismatches',
xlab='number of mismatches',
ylab='number of oligos with x mismatches')
#Plotting for the probes with 60-100 mismatches
boxplot(oligo1[,59:101],
col='green',
pars=list(outcol='red'),
main='All Probes, 58 to 100 mismatches',
xlab='number of mismatches',
ylab='number of oligos with x mismatches')
print(N1)
print('The number of the sequences that have only one perfect match'length(which(oligo1 [,1] == 1)))
print('The number of the sequences that have only one perfect match' length(which(oligo1 [,1] == 1)))
print('The number of the sequences that have only one perfect match' (length(which(oligo1 [,1] == 1))))
print((length(which(oligo1 [,1] == 1))))
print((length(which(oligo1 [,1] > 1))))
boxplot(which(oligo1 [,1] == 1),
col='green',
pars=list(outcol='red')
main='Probes that have only one perfect match',
xlab='number of mismatches',
ylab='xxx')
boxplot(which(oligo1 [,1] == 1),
col='green',
pars=list(outcol='red'),
main='Probes that have only one perfect match',
xlab='number of mismatches',
ylab='xxx')
plot?
?plot
?barplot
P = read.table("C:/Users/isoch/Desktop/123.xlsx",header=FALSE,sep=",",row.names=1)
View(P)
View(P)
P = read.table("C:/Users/isoch/Desktop/123.xlsx",sheet=1)
length(which(oligo1 [,1] > 1))
'1PMO'
'MT1PMO'
PMOMT1 = length(which(oligo1 [,1] > 1))
read.table("C:/Users/isoch/Desktop/123.csv",header=FALSE,sep=",",row.names=1)
View(P)
C = read.table("C:/Users/isoch/Desktop/123.csv",header=FALSE,sep=",",row.names=1)
View(C)
View(oligo1)
View(C)
View(C)
View(C)
View(C)
C = read.table("C:/Users/isoch/Desktop/123.csv",header=FALSE,sep=",",row.names=0)
C = read.table("C:/Users/isoch/Desktop/123.csv",header=FALSE,sep=",",row.names=1)
D = read.table("C:/Users/isoch/Desktop/123.csv",header=FALSE,sep=",",row.names=1)
View(D)
list(oneperfectmatchprobe = PMO1, morethanoneperfectmatchprobe = PMOMT1)
list(oneperfectmatchprobe = 19526, morethanoneperfectmatchprobe = 399)
Probe = list(oneperfectmatchprobe = 19526, morethanoneperfectmatchprobe = 399)
View(Probe)
plot(Probe)
Probe$oneperfectmatchprobe
plot(Probe)
View(Probe)
Probe1 = list(Number_of_matched_Sequence(1,'more than 1'), Quantity(19526,399))
?boxplot
boxplot(oligo1[,1],
col='green',
pars=list(outcol='red'),
main='All Probes, 58 to 100 mismatches',
xlab='number of mismatches',
ylab='number of oligos with x mismatches')
boxplot(oligo1[,1],
+         col='green',
+         pars=list(outcol='red'),
+         main='All Probes, 58 to 100 mismatches',
+         xlab='number of mismatches',
+         ylab='number of oligos with x mismatches', horizontal = TRUE)
print('The number of oligos with more than one perfect match is 399')
print('The number of oligos with only one perfect match is 19526')
print('The number of oligos with only one perfect match is 19526')
result = read.csv("C:/Users/isoch/Desktop/234.csv")
View(result)
head(result)
barplot(table(oligo1$V2))
?barplot
barplot(table(oligo1$V2),
main = 'Oligos with Different Numbers of Perfect Match',
xlab = 'Numbers of Perfect Match',
ylab = 'Numbers of Probes',
xlim = 20 ,
ylim = 20000 ,
)
barplot(table(oligo1$V2),
main = 'Oligos with Different Numbers of Perfect Match',
xlab = 'Numbers of Perfect Match',
ylab = 'Numbers of Probes',
)
oligo2 = read.table("C:/Users/isoch/Desktop/OligoHitsums2.csv",header=FALSE,sep=",",row.names=1)
OligoHitsums2 <- read.csv("C:/Users/isoch/Desktop/OligoHitsums2.csv", header=FALSE)
View(OligoHitsums2)
View(oligo2)
View(oligo2)
View(oligo2)
View(oligo2)
View(oligo2)
View(oligo2)
dim(oligo2)
#Plotting for the whole
boxplot(oligo2,
col='green',
pars=list(outcol='red'),
main='All probes',
xlab='number of mismatches',
ylab='number of oligos with x mismatches')
#Plotting for the probes with 60-100 mismatches
boxplot(oligo2[,34:61],
col='green',
pars=list(outcol='red'),
main='All Probes, 33 to 58 mismatches',
xlab='number of mismatches',
ylab='number of oligos with x mismatches')
length(which(oligo1 [,1] == 1))
length(which(oligo2 [,1] == 1))
length(which(oligo2 [,1] > 1))
barplot(table(oligo2$V2),
main = 'Oligos with Different Numbers of Perfect Match',
xlab = 'Numbers of Perfect Match',
ylab = 'Numbers of Probes',
)
readDNAStringSet("oligos2017.fasta")
source("https://bioconductor.org/biocLite.R")
biocLite("Biostrings")
setwd('C:/Users/isoch/Google 云端硬盘/Study/1. Semester an Uni-Tuebingen/Microarray Bioinformatik/HA2')
library(Biostrings)
readDNAStringSet("oligos2017.fasta")
?rnorm
x -> rnorm(10)
x <- rnorm(10)
x
ecdf(x)
ec
ecdf(x)
y
x <- rnorm(10)
y <- ecdf(x)
y
y
?ecdf
knots(y)
?quantile
quantile(x, probs = seq(0, 1, 0.25))
quantile(x, probs = seq(0, 0.5, 0.25))
quantile(x, probs = seq(0, 1, 0.25))
x
quantile(x, probs = seq(0, 1, 0.05))
mean(x)
median(x)
mean(x)-median(x)
y <- rnorm(100)
mean(y)-median(y)
z <- rnorm(10000)
mean(z)-median(z)
?rbinom
v <- rbinom(2, 10, 0.5)
v
v <- rbinom(10, 1, 0.5)
boxplot(v)
v1 <- array(1, 1, 1, 1, 1, 1, 1, 1, 1, 10)
v1 <- (1, 1, 1, 1, 1, 1, 1, 1, 1, 10)
v1 <- [1, 1, 1, 1, 1, 1, 1, 1, 1, 10]
v1 <- c(1, 1, 1, 1, 1, 1, 1, 1, 1, 10)
boxplot(v1)
v1 <- c(0, 0, 1, 0, 1, 0, 1, 1, 1, 10)
boxplot(v1)
?boxplot
v1 <- c(0, 0, 1, 0, 1, 0, 1, 1, 1, 10, 10, 10, 10, 10, 10)
boxplot(v1)
v <- rbinom(100, 10, 0.5)
boxplot(v)
v <- rbinom(100, 10, 0.1)
boxplot(v)
v <- rbinom(100, 10, 0.9)
boxplot(v)
v <- rbinom(100, 1, 0.9)
boxplot(v)
v <- rbinom(100, 1, 0.1)
boxplot(v)
v <- rbinom(100, 1, 0.2)
boxplot(v)
v <- rbinom(100, 1, 0.4)
boxplot(v)
v <- rbinom(100, 1, 0.3)
boxplot(v)
v <- rbinom(100, 1, 0.3)
boxplot(v)
v <- rbinom(100, 1, 0.5)
boxplot(v)
v <- rbinom(1, 1, 0.5)
boxplot(v)
v1 <- c(1,1,1,1,1,2)
boxplot(v1)
v1 <- c(0.3,0.3,0.3,0.3,0.3,10)
boxplot(v1)
setwd('C:/Users/isoch/Google 云端硬盘/Study/1. Semester an Uni-Tuebingen/Microarray Bioinformatik/HA2')
library(Biostrings)
readDNAStringSet("oligos2017.fasta")
o1 <- "oligos2017.fasta"
o1
o1 = readDNAStringSet("oligos2017.fasta")
o1
length(which(o1[1,] ='A'))
length(which(o1[1,] =A))
length(which(o1[1,] == 'A'))
length(which(o1[1,] == A))
length(o1[1,])
length(o1)
length(which(o1[1,o1$seq] == A))
length(which(o1[1,o1$`gb-CP003902-1-T-pallidum-str-Fribourg-Blanc_0`] == A))
library(stringr)
install.packages("stringr", repos='http://cran.us.r-project.org')
library(stringr)
o1(1,seq)
o1
o1[1,]
o1[1,seq]
o1$seq
o1$`gb-CP003902-1-T-pallidum-str-Fribourg-Blanc_0`
o1[,"seq"]
o1[2,]
o1[1,"seq"]
o1[1,1]
o1[1,$seq]
o1
o1[1,1]
o1[1,2]
o1[1,3]
o1[1,35]
o1[1,5]
o1[2,]
o1[2,1]
View(o1)
sum(str_count(o1[1,], "A"))
sum(str_count(o1[1,], "T"))
sum(str_count(o1[1,], "C"))
sum(str_count(o1[1,], "G"))
sum(str_count(o1[,], "G"))
1+1
MT <- function(x){
numa = sum(str_count(x, "A"))
numt = sum(str_count(x, "T"))
numc = sum(str_count(x, "C"))
numg = sum(str_count(x, "G"))
Tm = 2*(numa + numt) + 4*(numc + numg)
return(Tm)
}
MT(o1[1,])
apply(o1, 1, MT)
apply(o1, 1, MT)
MT(o1[2,])
mean(o1[1,])
length(o1[1,])
#Data reading
o1 = readDNAStringSet("oligos2017.fasta")
#Function programming
MT <- function(x){
numa = sum(str_count(x, "A"))
numt = sum(str_count(x, "T"))
numc = sum(str_count(x, "C"))
numg = sum(str_count(x, "G"))
Tm = 2*(numa + numt) + 4*(numc + numg)
return(Tm)
}
apply(o1, 1, MT)
apply(o1, 1, MT)
o1[,"seq"]
Biostrings::AA_ALPHABET
o1[1]
o1
o1@elementType
o1@ranges
o1@pool
is.vector(o1[1,])
is.matrix(o1[1,])
apply(o1, MT)
apply(o1, FUN=MT)
apply(o1[drop=F], FUN=MT)
apply(o1[drop=F],1, FUN=MT)
View(o1)
View(o1)
View(o1)
View(o1)
View(o1)
o1@ranges@NAMES
o1@ranges@elementType
o1@ranges@group
apply(o1[drop=F],1, FUN=MT)
?readDNAStringSet
fasta.seqlengths(o1)
fasta.seqlengths("oligos2017.fasta")
o1
o1[1,width]
o1[0,]
o1[,1]
o1[,0]
oligo1 = read.table("C:/Users/isoch/Desktop/OligoHitsums1.csv",header=FALSE,sep=",",row.names=1)
setwd('C:/Users/isoch/Google 云端硬盘/Study/1. Semester an Uni-Tuebingen/Microarray Bioinformatik/HA1')
oligo1 = read.table("OligoHitsums1.csv",header=FALSE,sep=",",row.names=1)
oligo1 = read.table("C:/Users/isoch/Desktop/OligoHitsums1.csv",header=FALSE,sep=",",row.names=1)
View(oligo1)
oligo1[0,5]
View(o1)
MT(o1)
MT(o1$`gb-CP003902-1-T-pallidum-str-Fribourg-Blanc_0`)
apply(o1@name, 1, FUN=MT)
data.frame(o1)
o2 <- data.frame(o1)
o2
View(o2)
apply(o2$o1, 1, FUN=MT)
dim(o1)
dim(o2)
apply(o2, 1, FUN=MT)
apply(o2[,1], 1, FUN=MT)
apply(o2[,1], 2, FUN=MT)
source("http://bioconductor.org/biocLite.R")
biocLite("HELP")
library("HELP")
calcTm(o1[1,])
alphabetFrequency(o1[1,])
apply(o1, 1, alphabetFrequency)
length(o1)
subseq(o1, start=c(1, 2, 3), end=c(3, 6, 5))
subseq(o1, start=c(1), end=c(3))
o2[1,1]
dim(o2)
apply(o2, 2, MT)
apply(o2, 1, MT)
Tm <- apply(o2, 1, MT)
view(Tm)
tm
Tm
View(o2)
Tm <- apply(o2[,1], 1, MT)
min(Tm)
max(Tm)
mean(Tm)
median(Tm)
boxplot(Tm)
boxplot(Tm,title='Melting Temperature')
boxplot(Tm,col='green',
pars=list(outcol='red'),
main='Melting Temperature',
xlab='',
ylab='Temperature/Celcius degree')
boxplot(Tm,col='green',
pars=list(outcol='red'),
main='Melting Temperature',
xlab='Oligo',
ylab='Temperature/Celcius degree')
print(min(Tm))
print(min(Tm),
max(Tm),
mean(Tm),
median(Tm))
print(min(Tm),
max(Tm),
mean(Tm),
median(Tm))
print('The minimum Tm is' min(Tm))
print('The minimum Tm is {5d:}').format(min(Tm))
print('The minimum of Tm is')
print(min(Tm))
print('The maximum of Tm is')
print(max(Tm))
print('The minimum of Tm is')
print(min(Tm))
print('The maximum of Tm is')
print(max(Tm))
print('The average of Tm is')
print(mean(Tm))
print('The median of Tm is')
print(median(Tm))
var(Tm)
library(stringi)
bases <- c("A", "T", "C", "G")
randomOligos <- function(n){
do.call(paste0, replicate(n, sample(bases, 1000, TRUE), FALSE))
}
View(randomOligos)
randomOligos(100)
randomOligos(1)
qwe <- randomOligos(10)
MT(qwe)
dim(qwe)
apply(qwe, 2, MT)
data.frame(qwe)
ewq <- data.frame(qwe)
View(ewq)
apply(ewq, 1, MT)
www <- apply(ewq, 1, MT)
mean(www)
qwe <- randomOligos(1)
ewq <- data.frame(qwe)
www <- apply(ewq, 1, MT)
mean(www)
www <- apply(ewq, 1, MT)
www <- apply(ewq, 1, MT)
AverageTmRandom <- function(x){
data1 = data.frame(randomOligos(x))
TmArray = apply(data1, 1, MT)
AverageTm = mean(TmArray)
return(AverageTm)
}
AverageTmRandom(1)
AverageTmRandom(100)
?plot
plot(AverageTmRandom)
plot(AverageTmRandom, 1, 300)
plot(AverageTmRandom())
plot(AverageTmRandom(1))
plot(AverageTmRandom(1:300))
plot(AverageTmRandom(1:300))
plot(AverageTmRandom)
plot.function(AverageTmRandom, x.lim =range(1,300))
plot.function(x**2, x.lim =range(1,300))
plot.function(AverageTmRandom ~x, x.lim =range(1,300))
plot(x, AverageTmRandom(x))
?plot
plot.function(AverageTmRandom, from = 1, to = 300, n = 101, ...)
plot.function(AverageTmRandom, from = 1, to = 300, n = 101)
plot.function(x*2, from = 1, to = 300, n = 101)
plot.function(a*2, from = 1, to = 300, n = 101)
curve(x^3-3*x, -2, 2)
curve(AverageTmRandom(x), 1, 300)
array1 = [1:100]
array1 = (1:100)
array1
array1 = (1:300)
array1
array2 = data.frame(array1)
array1 = (1:300)
array2 = data.frame(array1)
apply(array2, 1, AverageTmRandom)
AverageTm300 = apply(array2, 1, AverageTmRandom)
plot(AverageTm300)
curve(AverageTm300)
plot(AverageTm300, main='Average of Melting Temperature of Randomly Generated Oligos', xlab='Length of Oligo / Bp',
ylab='Average of Melting Temperature / Celsius Degree')
