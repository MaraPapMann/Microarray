xlab='number of mismatches',
ylab='number of oligos with x mismatches')
boxplot(oligo1[,60:100],
col='green',
pars=list(outcol='red'),
main='All Probes, 60 to 100 mismatches',
xlab='number of mismatches',
ylab='number of oligos with x mismatches')
boxplot(oligo1[,61:101],
col='green',
pars=list(outcol='red'),
main='All Probes, 60 to 100 mismatches',
xlab='number of mismatches',
ylab='number of oligos with x mismatches')
#Plotting for the probes with 60-100 mismatches
boxplot(oligo1[,59:101],
col='green',
pars=list(outcol='red'),
main='All Probes, 58 to 100 mismatches',
xlab='number of mismatches',
ylab='number of oligos with x mismatches')
print(N1)
print('The number of the sequences that have only one perfect match'length(which(oligo1 [,1] == 1)))
print('The number of the sequences that have only one perfect match' length(which(oligo1 [,1] == 1)))
print('The number of the sequences that have only one perfect match' (length(which(oligo1 [,1] == 1))))
print((length(which(oligo1 [,1] == 1))))
print((length(which(oligo1 [,1] > 1))))
boxplot(which(oligo1 [,1] == 1),
col='green',
pars=list(outcol='red')
main='Probes that have only one perfect match',
xlab='number of mismatches',
ylab='xxx')
boxplot(which(oligo1 [,1] == 1),
col='green',
pars=list(outcol='red'),
main='Probes that have only one perfect match',
xlab='number of mismatches',
ylab='xxx')
plot?
?plot
?barplot
P = read.table("C:/Users/isoch/Desktop/123.xlsx",header=FALSE,sep=",",row.names=1)
View(P)
View(P)
P = read.table("C:/Users/isoch/Desktop/123.xlsx",sheet=1)
length(which(oligo1 [,1] > 1))
'1PMO'
'MT1PMO'
PMOMT1 = length(which(oligo1 [,1] > 1))
read.table("C:/Users/isoch/Desktop/123.csv",header=FALSE,sep=",",row.names=1)
View(P)
C = read.table("C:/Users/isoch/Desktop/123.csv",header=FALSE,sep=",",row.names=1)
View(C)
View(oligo1)
View(C)
View(C)
View(C)
View(C)
C = read.table("C:/Users/isoch/Desktop/123.csv",header=FALSE,sep=",",row.names=0)
C = read.table("C:/Users/isoch/Desktop/123.csv",header=FALSE,sep=",",row.names=1)
D = read.table("C:/Users/isoch/Desktop/123.csv",header=FALSE,sep=",",row.names=1)
View(D)
list(oneperfectmatchprobe = PMO1, morethanoneperfectmatchprobe = PMOMT1)
list(oneperfectmatchprobe = 19526, morethanoneperfectmatchprobe = 399)
Probe = list(oneperfectmatchprobe = 19526, morethanoneperfectmatchprobe = 399)
View(Probe)
plot(Probe)
Probe$oneperfectmatchprobe
plot(Probe)
View(Probe)
Probe1 = list(Number_of_matched_Sequence(1,'more than 1'), Quantity(19526,399))
?boxplot
boxplot(oligo1[,1],
col='green',
pars=list(outcol='red'),
main='All Probes, 58 to 100 mismatches',
xlab='number of mismatches',
ylab='number of oligos with x mismatches')
boxplot(oligo1[,1],
+         col='green',
+         pars=list(outcol='red'),
+         main='All Probes, 58 to 100 mismatches',
+         xlab='number of mismatches',
+         ylab='number of oligos with x mismatches', horizontal = TRUE)
print('The number of oligos with more than one perfect match is 399')
print('The number of oligos with only one perfect match is 19526')
print('The number of oligos with only one perfect match is 19526')
result = read.csv("C:/Users/isoch/Desktop/234.csv")
View(result)
head(result)
barplot(table(oligo1$V2))
?barplot
barplot(table(oligo1$V2),
main = 'Oligos with Different Numbers of Perfect Match',
xlab = 'Numbers of Perfect Match',
ylab = 'Numbers of Probes',
xlim = 20 ,
ylim = 20000 ,
)
barplot(table(oligo1$V2),
main = 'Oligos with Different Numbers of Perfect Match',
xlab = 'Numbers of Perfect Match',
ylab = 'Numbers of Probes',
)
oligo2 = read.table("C:/Users/isoch/Desktop/OligoHitsums2.csv",header=FALSE,sep=",",row.names=1)
OligoHitsums2 <- read.csv("C:/Users/isoch/Desktop/OligoHitsums2.csv", header=FALSE)
View(OligoHitsums2)
View(oligo2)
View(oligo2)
View(oligo2)
View(oligo2)
View(oligo2)
View(oligo2)
dim(oligo2)
#Plotting for the whole
boxplot(oligo2,
col='green',
pars=list(outcol='red'),
main='All probes',
xlab='number of mismatches',
ylab='number of oligos with x mismatches')
#Plotting for the probes with 60-100 mismatches
boxplot(oligo2[,34:61],
col='green',
pars=list(outcol='red'),
main='All Probes, 33 to 58 mismatches',
xlab='number of mismatches',
ylab='number of oligos with x mismatches')
length(which(oligo1 [,1] == 1))
length(which(oligo2 [,1] == 1))
length(which(oligo2 [,1] > 1))
barplot(table(oligo2$V2),
main = 'Oligos with Different Numbers of Perfect Match',
xlab = 'Numbers of Perfect Match',
ylab = 'Numbers of Probes',
)
asd(8.5, 9.5)
asd = function(x,y) z = y - 0.746*x + 2.056
asd(8.5, 9.5)
asd = function(x,y) z = y - 0.746*x + 2.056
e1 = asd(8.5, 9.5)
e1 = asd(8.5, 9.5)
e2 = asd(9.5, 8.5)
e3 = asd(7.0, 8.0)
e4 = asd(6.5, 7.0)
e5 = asd(7.0, 6.0)
asd = function(x,y) z = y - (0.746*x + 2.056)
e1 = asd(8.5, 9.5)
e2 = asd(9.5, 8.5)
e3 = asd(7.0, 8.0)
e4 = asd(6.5, 7.0)
e5 = asd(7.0, 6.0)
1:5
loess.smooth?
?loess.smooth
?loess.smooth
# Reading Files
setwd("C:/Users/isoch/Google 云端硬盘/Study/1. Semester an Uni-Tuebingen/Microarray Bioinformatik/HA5")
affy <- (read.table('affy_data.tsv', header = TRUE, row.names = 1))[1:54851,]
# Programming functions
LinearRegression = function(x, y){
xm <- mean(x)
ym <- mean(y)
b <- sum((x-xm) * (y-ym)) / sum((x-xm)**2)
a <- ym - b*xm
return(list(a=a, b=b, gerade=function(z) a+b*z,
modifiedchannel=(y-a)/b))
}
# Calculating linear regression of each pair probe
LR1 <- LinearRegression(affy$E13R021_P001.CEL, affy$E13R021_P002.CEL)
LR2 <- LinearRegression(affy$E13R021_P001.CEL, affy$E13R021_P005.CEL)
LR3 <- LinearRegression(affy$E13R021_P001.CEL, affy$E13R021_P011.CEL)
LR4 <- LinearRegression(affy$E13R021_P002.CEL, affy$E13R021_P005.CEL)
LR5 <- LinearRegression(affy$E13R021_P002.CEL, affy$E13R021_P011.CEL)
LR6 <- LinearRegression(affy$E13R021_P005.CEL, affy$E13R021_P011.CEL)
# Plotting original datas
par(mfcol=c(2,3))
plot(affy$E13R021_P001.CEL, affy$E13R021_P002.CEL, pch=20)
abline(a=LR1$a, b=LR1$b, col='blue', lwd=3, lty=1)
plot(affy$E13R021_P001.CEL, affy$E13R021_P005.CEL, pch=20)
abline(a=LR2$a, b=LR2$b, col='blue', lwd=3, lty=1)
plot(affy$E13R021_P001.CEL, affy$E13R021_P011.CEL, pch=20)
abline(a=LR3$a, b=LR3$b, col='blue', lwd=3, lty=1)
plot(affy$E13R021_P002.CEL, affy$E13R021_P005.CEL, pch=20)
abline(a=LR4$a, b=LR4$b, col='blue', lwd=3, lty=1)
plot(affy$E13R021_P002.CEL, affy$E13R021_P011.CEL, pch=20)
abline(a=LR5$a, b=LR5$b, col='blue', lwd=3, lty=1)
plot(affy$E13R021_P005.CEL, affy$E13R021_P011.CEL, pch=20)
abline(a=LR6$a, b=LR6$b, col='blue', lwd=3, lty=1)
# Plotting normalized data
plot(affy$E13R021_P001.CEL, LR1$modifiedchannel, pch=20)
abline(a=LR1$a, b=LR1$b, col='blue', lwd=3, lty=1)
plot(affy$E13R021_P001.CEL, LR2$modifiedchannel, pch=20)
abline(a=LR2$a, b=LR2$b, col='blue', lwd=3, lty=1)
plot(affy$E13R021_P001.CEL, LR3$modifiedchannel, pch=20)
abline(a=LR3$a, b=LR3$b, col='blue', lwd=3, lty=1)
plot(affy$E13R021_P002.CEL, LR4$modifiedchannel, pch=20)
abline(a=LR4$a, b=LR4$b, col='blue', lwd=3, lty=1)
plot(affy$E13R021_P002.CEL, LR5$modifiedchannel, pch=20)
abline(a=LR5$a, b=LR5$b, col='blue', lwd=3, lty=1)
plot(affy$E13R021_P005.CEL, LR6$modifiedchannel, pch=20)
abline(a=LR6$a, b=LR6$b, col='blue', lwd=3, lty=1)
# Processing data with log2 function
affylog2 <- log2(affy)
# Loading library affy
library(affy)
# Programming MA calculating function
MA = function(x,y){
M <- x-y
A <- (x+y)/2
M_mean <- mean(M)
A_mean <- mean(A)
b <- sum((M-M_mean) * (A-A_mean)) / sum((A-A_mean)**2)
a <- M_mean - b*A_mean
return(list(M=M, A=A, a=a, b=b, regression=function(z) a+b*z, modifiedchannel=(M-a)/b ))
}
# Calculating
LRMA1 <- MA(affylog2$E13R021_P001.CEL, affylog2$E13R021_P002.CEL)
LRMA2 <- MA(affylog2$E13R021_P001.CEL, affylog2$E13R021_P005.CEL)
LRMA3 <- MA(affylog2$E13R021_P001.CEL, affylog2$E13R021_P011.CEL)
LRMA4 <- MA(affylog2$E13R021_P002.CEL, affylog2$E13R021_P005.CEL)
LRMA5 <- MA(affylog2$E13R021_P002.CEL, affylog2$E13R021_P011.CEL)
LRMA6 <- MA(affylog2$E13R021_P005.CEL, affylog2$E13R021_P011.CEL)
# Plotting MA Plot with Linear Regression line
plot(LRMA1$A, LRMA1$M, xlab = 'A', ylab = 'M', pch=20)
abline(a=LRMA1$a, b=LRMA1$b, col='red', lwd=1)
plot(LRMA2$A, LRMA2$M, xlab = 'A', ylab = 'M', pch=20)
abline(a=LRMA2$a, b=LRMA2$b, col='red', lwd=1)
plot(LRMA3$A, LRMA3$M, xlab = 'A', ylab = 'M', pch=20)
abline(a=LRMA3$a, b=LRMA3$b, col='red', lwd=1)
plot(LRMA4$A, LRMA4$M, xlab = 'A', ylab = 'M', pch=20)
abline(a=LRMA4$a, b=LRMA4$b, col='red', lwd=1)
plot(LRMA5$A, LRMA5$M, xlab = 'A', ylab = 'M', pch=20)
abline(a=LRMA5$a, b=LRMA5$b, col='red', lwd=1)
plot(LRMA6$A, LRMA6$M, xlab = 'A', ylab = 'M', pch=20)
abline(a=LRMA6$a, b=LRMA6$b, col='red', lwd=1)
# Plotting Normalized MA Plot with Linear Regression line
plot(LRMA1$A, LRMA1$modifiedchannel, xlab = 'A', ylab = 'M', pch=20)
abline(a=LRMA1$a, b=LRMA1$b, col='red', lwd=1)
plot(LRMA2$A, LRMA2$modifiedchannel, xlab = 'A', ylab = 'M', pch=20)
abline(a=LRMA2$a, b=LRMA2$b, col='red', lwd=1)
plot(LRMA3$A, LRMA3$modifiedchannel, xlab = 'A', ylab = 'M', pch=20)
abline(a=LRMA3$a, b=LRMA3$b, col='red', lwd=1)
plot(LRMA4$A, LRMA4$modifiedchannel, xlab = 'A', ylab = 'M', pch=20)
abline(a=LRMA4$a, b=LRMA4$b, col='red', lwd=1)
plot(LRMA5$A, LRMA5$modifiedchannel, xlab = 'A', ylab = 'M', pch=20)
abline(a=LRMA5$a, b=LRMA5$b, col='red', lwd=1)
plot(LRMA6$A, LRMA6$modifiedchannel, xlab = 'A', ylab = 'M', pch=20)
abline(a=LRMA6$a, b=LRMA6$b, col='red', lwd=1)
# After linear regression normalization, the coordinate was reset according to the results of linear regression.
# The vertical values were adjusted to a normalized level.
# Linear regression can be directly applied to scatterplot, but not to MA-plot.
# M'= M-f(A)
LRMA1
View(LRMA1)
scatter.smooth(LRMA1$A, LRMA1$M)
scatter.smooth(LRMA1$A, LRMA1$M, col='r')
scatter.smooth(LRMA1$A, LRMA1$M, col='red')
scatter.smooth(LRMA1$A, LRMA1$M, col='red',degree = 1)
scatter.smooth(LRMA1$A, LRMA1$M, col='red',degree = 2)
scatter.smooth(LRMA1$A, LRMA1$M, col='red',degree = 1)
scatter.smooth(LRMA1$A, LRMA1$M, col='red',degree = 2)
LinearRegression(LRMA1$A, LRMA2$M)
LRMAnormalized <- LinearRegression(LRMA1$A, LRMA2$M)
View(LRMAnormalized)
setwd('C:/Users/isoch/Google 云端硬盘/Study/1. Semester an Uni-Tuebingen/Microarray Bioinformatik/HA6')
SingleExpression <- read.table('SingleExpressionCELfiles4A6.tsv')
SingleExpression <- read.table(file = 'SingleExpressionCELfiles4A6.tsv')
SingleExpression <- read.table(file = 'SingleExpressionCELfiles4A6.tsv', header = T, sep = "\t")
View(SingleExpression)
lo = loess(M~A,data=LRMA1, span = 1, degree = 1)
lo = loess(M~A,data=LRMA1, span = 1, degree = 1)
fA <- predict(lo, LRMA1$A)
M_normalized = LRMA1$M - fA
lo = loess(M~A,data=LRMA1, span = 1, degree = 1)
lo = loess(LRMA1$M~LRMA1$A, span = 1, degree = 1)
fA <- predict(lo, LRMA1$A)
M_normalized = LRMA1$M - fA
View(lo)
plot(LRMA1$A, M_normalized, pch='.')
dev.off
plot(LRMA1$A, M_normalized, pch='.')
par(mfcol = c(1,1))
lo = loess(LRMA1$M~LRMA1$A, span = 1, degree = 1)
fA <- predict(lo, LRMA1$A)
M_normalized = LRMA1$M - fA
plot(LRMA1$A, M_normalized, pch='.')
lo = loess(LRMA1$M~LRMA1$A, span = 1/16, degree = 1)
fA <- predict(lo, LRMA1$A)
M_normalized = LRMA1$M - fA
plot(LRMA1$A, M_normalized, pch='.')
SingleExpression <- read.table(file = 'SingleExpressionCELfiles4A6.tsv', header = T, sep = "\t", row.names = 1)
dim(SingleExpression)
220205/5
SingleExpression <- read.table(file = 'SingleExpressionCELfiles4A6.tsv'[1:44041,], header = T, sep = "\t", row.names = 1)
SingleExpression <- read.table(file = 'SingleExpressionCELfiles4A6.tsv', header = T, sep = "\t")
SE <- SingleExpression[1:44041]
SE <- SingleExpression[1:44041,]
View(SE)
SingleExpression <- read.table(file = 'SingleExpressionCELfiles4A6.tsv', header = T, sep = "\t", nrows = 44041,
row.names = 1)
dim(SingleExpression)
setwd('C:/Users/isoch/Google 云端硬盘/Study/1. Semester an Uni-Tuebingen/Microarray Bioinformatik/HA6')
SingleExpression <- read.table(file = 'SingleExpressionCELfiles4A6.tsv', header = T, sep = "\t", nrows = 44041,
row.names = 1)
#scatter.smooth(LRMA1$A, LRMA1$M, col='red',degree = 1)
#scatter.smooth(LRMA1$A, LRMA1$M, col='red',degree = 2)
#LRMAnormalized <- LinearRegression(LRMA1$A, LRMA2$M)
par(mfcol = c(2,3))
lo1 = loess(LRMA1$M~LRMA1$A, span = 1/16, degree = 1)
lo2 = loess(LRMA2$M~LRMA2$A, span = 1/16, degree = 1)
lo3 = loess(LRMA3$M~LRMA3$A, span = 1/16, degree = 1)
lo4 = loess(LRMA4$M~LRMA4$A, span = 1/16, degree = 1)
lo5 = loess(LRMA5$M~LRMA5$A, span = 1/16, degree = 1)
lo6 = loess(LRMA6$M~LRMA6$A, span = 1/16, degree = 1)
fA1 <- predict(lo1, LRMA1$A)
fA2 <- predict(lo2, LRMA2$A)
fA3 <- predict(lo3, LRMA3$A)
fA4 <- predict(lo4, LRMA4$A)
fA5 <- predict(lo5, LRMA5$A)
fA6 <- predict(lo6, LRMA6$A)
M_normalized1 = LRMA1$M - fA1
M_normalized2 = LRMA2$M - fA2
M_normalized3 = LRMA3$M - fA3
M_normalized4 = LRMA4$M - fA4
M_normalized5 = LRMA5$M - fA5
M_normalized6 = LRMA6$M - fA6
plot(LRMA1$A, M_normalized1, pch='.')
plot(LRMA2$A, M_normalized2, pch='.')
plot(LRMA3$A, M_normalized3, pch='.')
plot(LRMA4$A, M_normalized4, pch='.')
plot(LRMA5$A, M_normalized5, pch='.')
plot(LRMA6$A, M_normalized6, pch='.')
View(SingleExpression)
?loess
nrow(SingleExpression)
?rank
rank(SingleExpression)
rank(SingleExpression$Baseline.Array)
baselinerank <- rank(SingleExpression$Baseline.Array)
baselinerank <- matrix(rank(SingleExpression$Baseline.Array))
View(baselinerank)
?matrix
baselinerank <- matrix([rank(SingleExpression$Baseline.Array), rank(SingleExpression$Second.Array)])
baselinerank <- matrix(c(rank(SingleExpression$Baseline.Array), rank(SingleExpression$Second.Array)))
View(baselinerank)
baselinerank <- matrix(c(SingleExpression$Baseline.Array), rank(SingleExpression$Second.Array))
baselinerank <- matrix(rank(SingleExpression$Baseline.Array), rank(SingleExpression$Second.Array))
baselinerank <- matrix(rank(SingleExpression$Baseline.Array))
View(baselinerank)
?cbind
secondlinerank <- matrix(rank(SingleExpression$Second.Array))
View(secondlinerank)
ranklist <- cbind(baselinerank, secondlinerank)
View(ranklist)
SE <- cbind(SingleExpression, ranklist)
View(SE)
`rownames<-`(SE, c("baserank", "secondrank"))
`rownames<-`(SE[,3:4], c("baserank", "secondrank"))
`colnames<-`(SE[,3:4], c("baserank", "secondrank"))
View(SE)
View(SE)
colnames(SE)
colnames(SE[,3:4]) <- c("baserank", "secondrank")
View(SE)
SE <- cbind(SingleExpression, ranklist)
colnames(SE[,3:4]) <- c("baserank", "secondrank")
View(SE)
colnames(SE)[3] <- "baserank"
View(SE)
colnames(SE)[3:4] <- c("baserank", "secondrank")
cbind(1, 2)
rbind(1, 2)
k = nrow(SingleExpression)
k
k = nrow(SE)
k
?repaet
?repeat
sdf
?repeat
1
2
3
c(1:k)
abs(-1)
SE[1, 3]
TRUE & FALSE
TRUE | FALSE
c()
k = nrow(SE)
tl = 0.003
th = 0.008
invagene = c()
invagene
NULL
for (i in c(1:k)) {
di = abs(SE[i, 3] - SE[i, 4]) / k
rm = (SE[i, 3] + SE[i, 4]) / 2
if(((di <= th) & (rm >= k/2)) | ((di <= tl) & (rm <= k/2))){
invagene = rbind(invagene, di)
}
}
View(invagene)
invagenebase = c()
invagenesecond = c()
for (i in c(1:k)) {
di = abs(SE[i, 3] - SE[i, 4]) / k
rm = (SE[i, 3] + SE[i, 4]) / 2
if(((di <= th) & (rm >= k/2)) | ((di <= tl) & (rm <= k/2))){
invagenebase = rbind(invagenebase, SE[i, 3])
invagenesecond = rbind(invagenesecond, SE[i, 4])
}
}
View(invagenebase)
View(invagenesecond)
View(invagenebase)
invagenebase = c()
invagenesecond = c()
for (i in c(1:k)) {
di = abs(SE[i, 3] - SE[i, 4]) / k
rm = (SE[i, 3] + SE[i, 4]) / 2
if(((di <= th) & (rm >= k/2)) | ((di <= tl) & (rm <= k/2))){
invagenebase = rbind(invagenebase, SE[i, 1])
invagenesecond = rbind(invagenesecond, SE[i, 2])
}
}
invagene = cbind(invagenebase, invagenesecond)
colnames(invagene)[1:2] <- c("base", "second")
View(invagene)
LinearRegression(invagene$base, invagene$second)
invagene$base
is.matrix(invagene)
View(invagene)
invagene[,1]
LinearRegression(invagene[,1], invagene[,2])
invagenebase = c()
invagenesecond = c()
for (i in c(1:k)) {
di = abs(SE[i, 3] - SE[i, 4]) / k
rm = (SE[i, 3] + SE[i, 4]) / 2
if(((di <= th) & (rm >= k/2)) | ((di <= tl) & (rm <= k/2))){
invagenebase = rbind(invagenebase, SE[i, 1])
invagenesecond = rbind(invagenesecond, SE[i, 2])
print(nrow(invagenebase))
}
}
invagene = cbind(invagenebase, invagenesecond)
colnames(invagene)[1:2] <- c("base", "second")
invagenebase = c()
invagenesecond = c()
for (i in c(1:k)) {
di = abs(SE[i, 3] - SE[i, 4]) / k
rm = (SE[i, 3] + SE[i, 4]) / 2
if(((di <= th) & (rm >= k/2)) | ((di <= tl) & (rm <= k/2))){
invagenebase = rbind(invagenebase, SE[i, 1])
invagenesecond = rbind(invagenesecond, SE[i, 2])
}
print(nrow(invagenebase))
}
invagene = cbind(invagenebase, invagenesecond)
colnames(invagene)[1:2] <- c("base", "second")
rbind(NULL)
invagenebase = c()
invagenesecond = c()
size = rbind(NULL)
for (i in c(1:k)) {
di = abs(SE[i, 3] - SE[i, 4]) / k
rm = (SE[i, 3] + SE[i, 4]) / 2
if(((di <= th) & (rm >= k/2)) | ((di <= tl) & (rm <= k/2))){
invagenebase = rbind(invagenebase, SE[i, 1])
invagenesecond = rbind(invagenesecond, SE[i, 2])
}
size = rbind(size, nrow(invagenebase))
}
invagene = cbind(invagenebase, invagenesecond)
colnames(invagene)[1:2] <- c("base", "second")
View(size)
plot(c(1: nrow(size)), size)
plot(c(1: nrow(size)), size, xlab = "Times of Iteration", ylab = "Size of the Set")
plot(c(1: nrow(size)), size, xlab = "Times of Iteration", ylab = "Size of the Set", 'r-')
?plot
plot(c(1: nrow(size)), size, xlab = "Times of Iteration", ylab = "Size of the Set", type = l, col = "red")
plot(c(1: nrow(size)), size, xlab = "Times of Iteration", ylab = "Size of the Set", type = "l", col = "red")
plot(c(1: nrow(size)), size, xlab = "Times of Iteration", ylab = "Size of the Set", type = "l", col = "red")
plot(c(1: nrow(size)), size, xlab = "Times of Iteration", ylab = "Size of the Set", type = "l", col = "red", main = "fuck me")
plot(c(1: nrow(size)), size, xlab = "Times of Iteration", ylab = "Size of the Set", type = "l", col = "red",
main = "Times of Iteration X Size of the Set")
lr <- LinearRegression(invagene[,1], invagene[,2])
View(lr)
invalr <- LinearRegression(invagene[,1], invagene[,2])
invalr <- LinearRegression(invagene[,1], invagene[,2])
complr <- LinearRegression(SE$Baseline.Array, SE$Second.Array)
View(complr)
plot(SE$Baseline.Array, complr$modifiedchannel)
plot(SE$Baseline.Array, complr$modifiedchannel, pch=20)
abline(a=complr$a, b=complr$b, col="red", lty=3)
abline(a=complr$a, b=complr$b, col="red", lty=3, lwd=3)
plot(SE$Baseline.Array, complr$modifiedchannel, pch=20, main = "Complete Normalized Data")
abline(a=complr$a, b=complr$b, col="b", lty=3, lwd=3)
plot(SE$Baseline.Array, complr$modifiedchannel, pch=3, main = "Complete Normalized Data")
abline(a=complr$a, b=complr$b, col="blue", lty=3, lwd=3)
plot(SE$Baseline.Array, complr$modifiedchannel, pch=5, main = "Complete Normalized Data")
abline(a=complr$a, b=complr$b, col="blue", lty=3, lwd=3)
normalizedsecond <- ((SE$Second.Array - invalr$a) / invalr$b)
rbind(normalizedsecond)
normalizedsecond <- as.matrix((SE$Second.Array - invalr$a) / invalr$b)
View(normalizedsecond)
plot(SE$Baseline.Array, normalizedsecond[,1], pch=5,
main = "Normalized Data through linear regression of invariant genes")
abline(a=invalr$a, b=invalr$b, col="blue", lty=3, lwd=3)
